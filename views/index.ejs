<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>SmartBudget - The app for the distinguished budgeter!</title>
<!-- link rel="stylesheet" href="https://threads.plaid.com/threads.css" -->

<link rel="stylesheet" type="text/css" href="style.css">
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
  <main class="main">
    <div class="grid">
      <div class="grid__column grid__column--is-twelve-columns">
        <div id="banner" class="top-banner">
          <h1 class="top-banner__heading">SmartBudget</h1>
          <p id="intro" class="top-banner__subheading">
            An application created to show my proficiency in Javascript
          </p>
        </div>

        <div id="container" class="initial-view">
          <p class="initial-view__description">
            
            Click the button below to open a list of Institutions. After you select one, youâ€™ll be guided through an authentication process.
          </p>

          <button id="link-btn" class="button button--is-primary">Connect using Plaid</button>
        </div>

        <div id="app" class="connected-view">

          <div class="box">
            <h3 class="box__heading">Budget</h3>

            <!--Transactions -->
            <div class="item-data-row">
              <p class="p-intro">Please enter the date range you wish to check (YYYY-MM-DD) and press "Check budget"</p>
              <div id="filter"><p class="filters">From: <input type="text" id="date-from"/> To:<input type="text" id="date-to"/></p></div>
              <button id="get-transactions-btn" class="button button--is-small button--is-default button--is-full-width">Check budget</button>
              <div id="warn"><p>The dates are in an invalid format</p></div>
              <div class="item-data-row__response">
                <table id="table-transaction"><tbody id="get-transactions-data"></tbody></table>
              </div>
            </div>
            <div id="transaction-table">
              <table id="transactions">

              </table>
            </div>

          </div>


        </div>
      </div>
    </div>
  </main>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script><!--jquery-->
  <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script><!--script source for Link-->
  <script>
  (function($) {
    var products = '<%= p_product %>'.split(',');//Products for which we will have access (we only need transactions)

    //Handler for Link, which will handle username and password 
    var handler = Plaid.create({
      apiVersion: 'v2',
      clientName: 'Plaid Quickstart',
      env: '<%= p_env %>',
      product: products,
      key: '<%= p_public_key %>',
      onSuccess: function(public_token) {
        $.post('/get_access_token', {
          public_token: public_token
        }, function(data) {
          $('#container').fadeOut('fast', function() {
            $('#intro').hide();
            $('#app, #steps').fadeIn('slow');
          });
        });
      },
    });

    var accessToken = clean_access_token('access_token');

    if (accessToken != null && accessToken != '') {
      $.post('/set_access_token', {
        access_token: accessToken
      }, function(data) {
        $('#container').fadeOut('fast', function() {
          $('#intro').hide();
          $('#app, #steps').fadeIn('slow');
        });
        
      });
    }

    $('#link-btn').on('click', function(e) {
      handler.open();
    });

    if (accessToken != null && accessToken != '') {
      $.get('/transactions', function(data) {
        if (data.error != null && data.error.error_code != null) {
          // Format the error
          var errorHtml = '<div class="inner"><p>' +
           '<strong>' + data.error.error_code + ':</strong> ' +
           (data.error.display_message == null ? data.error.error_message : data.error.display_message)  + '</p></div>';

          if (data.error.error_code === 'PRODUCT_NOT_READY') {
            // Add additional context for `PRODUCT_NOT_READY` errors
            errorHtml += '<div class="inner"><p>Note: The PRODUCT_NOT_READY ' +
             'error is returned when a request to retrieve Transaction data ' +
             'is made before Plaid finishes the initial ' +
             'transaction pull.</a></p></div>';
          }
          // Render the error
          $('#get-transactions-data').slideUp(function() {
            $(this).slideUp(function() {
              $(this).html(errorHtml).slideDown();
            });
          });
        } else {
          $('#get-transactions-data').slideUp(function() {
            var html = generate_transactions_table(data.categories);
            $(this).slideUp(function() {
              $(this).html(html).slideDown();
            });
          });
        }
      });
    }

     $('#get-transactions-btn').on('click', function(e) {
      if (validate_dates($("#date-from").val(),$("#date-to").val())){
        $('#warn').fadeOut('fast');
      $.get('/transactions?from='+$("#date-from").val()+'&to='+$("#date-to").val(), function(data) {
        if (data.error != null && data.error.error_code != null) {
          // Format the error
          var errorHtml = '<div class="inner"><p>' +
           '<strong>' + data.error.error_code + ':</strong> ' +
           (data.error.display_message == null ? data.error.error_message : data.error.display_message)  + '</p></div>';

          if (data.error.error_code === 'PRODUCT_NOT_READY') {
            // Add additional context for `PRODUCT_NOT_READY` errors
            errorHtml += '<div class="inner"><p>Note: The PRODUCT_NOT_READY ' +
             'error is returned when a request to retrieve Transaction data ' +
             'is made before Plaid finishes the initial ' +
             'transaction pull.</a></p></div>';
          }
          // Render the error
          $('#get-transactions-data').slideUp(function() {
            $(this).slideUp(function() {
              $(this).html(errorHtml).slideDown();
            });
          });
        } else {
          $('#get-transactions-data').slideUp(function() {
            var html = generate_transactions_table(data.categories);
            $(this).slideUp(function() {

              $(this).html(html).slideDown();
            });
          });
        }
      });
    }else{
      $('#warn').fadeIn('slow');
    }
    });

  })(jQuery);

function clean_access_token(key) {
    key = key.replace(/[*+?^$.\[\]{}()|\\\/]/g, "\\$&"); // escape RegEx meta chars
    var match = location.search.match(new RegExp("[?&]"+key+"=([^&]+)(&|$)"));
    return match && decodeURIComponent(match[1].replace(/\+/g, " "));
}

function generate_transactions_table(Categories){
  let built_html = "";
  Categories.forEach(category => {
      //built_html += "<tr class=\"row-budget\" id=\"row-" + category.label + "\"><td class=\"cell-label\">" + category.label + "</td><td>" + category.amount.toString() + "</td><td><img src=\"./../img/arrow-down.png\" id=\"img-"+category.label+"\"/></td></tr>";
      built_html += "<tr class=\"row-category-budget\" id=\"row-" + category.label + "\"><td class=\"cell-label\">" + category.label + "</td><td class=\"cell-amount\">$" + category.amount.toFixed(2) + "</td></tr>";
  });
  

  return built_html;

}
function validate_dates(to, from){
    if(!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(to)){
      return false;
    }
        
    if(!/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(from)){
      return false;
    }
    return true;
}
function parse_date(date){
  // Parse the date parts to integers
  var date_parts = date.split("-");
  var day = parseInt(parts[2], 10);
  if(day.length < 2 ){
    day = "0"+day;
  }
  var month = parseInt(parts[1], 10);
  if(month.length < 2 ){
    month = "0"+month;
  }
  var year = parseInt(parts[0], 10);
  return year+month+day;
}
 


 </script>
</body>
</html>
